// generated by jsonenums -type=FileChangeType; DO NOT EDIT

package messages

import (
	"encoding/json"
	"fmt"
)

var (
	_FileChangeTypeNameToValue = map[string]FileChangeType{
		"ChangeUnknown":      ChangeUnknown,
		"ChangeAddition":     ChangeAddition,
		"ChangeRemoval":      ChangeRemoval,
		"ChangeModification": ChangeModification,
		"ChangeRename":       ChangeRename,
	}

	_FileChangeTypeValueToName = map[FileChangeType]string{
		ChangeUnknown:      "ChangeUnknown",
		ChangeAddition:     "ChangeAddition",
		ChangeRemoval:      "ChangeRemoval",
		ChangeModification: "ChangeModification",
		ChangeRename:       "ChangeRename",
	}
)

func init() {
	var v FileChangeType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FileChangeTypeNameToValue = map[string]FileChangeType{
			interface{}(ChangeUnknown).(fmt.Stringer).String():      ChangeUnknown,
			interface{}(ChangeAddition).(fmt.Stringer).String():     ChangeAddition,
			interface{}(ChangeRemoval).(fmt.Stringer).String():      ChangeRemoval,
			interface{}(ChangeModification).(fmt.Stringer).String(): ChangeModification,
			interface{}(ChangeRename).(fmt.Stringer).String():       ChangeRename,
		}
	}
}

// MarshalJSON is generated so FileChangeType satisfies json.Marshaler.
func (r FileChangeType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FileChangeTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid FileChangeType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so FileChangeType satisfies json.Unmarshaler.
func (r *FileChangeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FileChangeType should be a string, got %s", data)
	}
	v, ok := _FileChangeTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid FileChangeType %q", s)
	}
	*r = v
	return nil
}

// Code generated by go-bindata.
// sources:
// assets/static/gall.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsStaticGallTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\xfb\x73\xd3\xb8\x13\xff\xbd\x7f\x85\x10\x9d\xef\x38\xb4\xb6\x9b\x16\x4a\xbf\x79\x74\xa6\xd3\xf6\x18\x18\xb8\xf6\xae\x3c\x86\x23\xcc\x8d\x62\x2b\xb6\x52\x59\x32\x92\x9c\x07\x34\xff\xfb\xad\x64\x27\xb1\xd3\x94\x3b\x18\xcc\x14\xcb\xd2\xee\x7e\xf6\xad\x4d\xef\xd1\xc5\xd5\xf9\xdb\x8f\xd7\x97\x28\x35\x19\x3f\xdd\xe9\xd9\x17\xe2\x44\x24\x7d\x4c\x05\xb6\x1b\x94\xc4\xf0\x32\xcc\x70\x7a\xfa\x82\x70\x4e\xd5\xbc\x17\x96\x9f\x3b\x3d\x1d\x29\x96\x1b\xa4\x55\xd4\xc7\x61\x48\xc6\x64\x16\x24\x52\x26\x9c\x92\x9c\xe9\x20\x92\x99\xdb\x0b\x39\x1b\xea\x70\xfc\xa5\x00\xde\xf0\x30\x38\x08\x8e\xaa\x8f\x20\x63\x22\x18\x6b\x7c\xda\x0b\x4b\x49\x6b\x91\x66\x9e\xd3\x3e\x36\x74\x66\xc2\x31\x99\x90\x72\x17\x14\x42\xf0\xec\x7a\xa3\x42\x44\x86\x49\xe1\xb5\xd0\x37\xb7\x35\x21\x0a\x45\x52\x88\xee\xea\x2b\x67\x91\x46\x7d\xa0\xc5\x8f\xed\x12\xb7\xba\x3b\xee\x6c\xc9\x8a\xa2\x14\xcc\xa4\xef\x34\x55\xaf\x99\x36\x9e\x20\x19\xdd\x1f\x4b\x26\x98\x48\x96\x52\xed\xc3\x46\xc8\xdb\xb2\xbd\x84\xe1\xac\x04\xe9\xc1\x22\xe2\x44\xeb\xfe\x00\x73\x90\xe7\x27\x4a\x16\xb9\xcf\x0c\xcd\x06\x38\x3c\xc5\xad\xc0\xda\xe2\x50\x5a\xdd\x86\x94\x02\x34\xb0\x1c\x01\xc9\x73\x2a\x62\x8f\xb3\x1a\xc1\x02\x51\xae\xe9\x43\xb8\x2b\xd6\x28\x65\x3c\x56\x14\xfc\x11\x8c\x18\x37\x54\x35\x3c\xa4\xa8\x29\x94\x00\x2d\x4d\xca\x74\xa5\x48\x0b\xf5\xfb\xc8\x6a\xb3\xd8\x50\x87\xb3\x40\xd1\x4c\x4e\xa8\x57\x57\x63\xa7\xfc\xbf\xe9\x41\x12\xc7\xd7\x2c\xf2\x72\x62\xd2\x4d\xd7\x38\x1d\x47\xb2\x10\xb1\x73\xcf\xf8\x4b\x49\xb5\x81\xe5\x9c\xeb\xa8\x02\x4e\x45\xb2\x45\x0c\x3c\xa5\xf6\x1b\x8c\x8b\xfb\x68\x8a\x12\x7e\x0d\x20\x00\x88\x43\x6d\x88\x61\x51\x88\xd1\x1e\xb2\xc0\xdd\xfb\xe4\x31\x9b\x54\x91\xb3\xab\x65\xe8\x22\xc9\xfd\x2c\xf6\x8f\x90\x5d\xe8\xcc\x7f\xea\x16\x33\xed\x1f\x57\x51\x24\xc6\x28\x0f\xb3\x18\xef\x3b\x83\x96\x41\xb3\x72\x08\xaa\x51\xa4\x8a\x8e\xf0\xfe\x52\xa7\x06\x1d\xcb\x92\x15\x1e\xac\x7d\x45\x75\x2e\x85\x66\x13\xda\xc0\x80\xa2\xaa\x09\xb8\xe7\x3a\x9b\xd4\x4b\xa9\x60\x41\x75\x5c\x85\x28\x0c\x2b\xb7\x69\x44\x75\x44\x72\x1a\x97\x88\x2e\xe2\x10\x17\x85\xc6\x7f\xd8\x02\x6c\xc6\x13\xa2\x84\xb2\x39\x8b\xd1\xbd\x30\x54\x19\x84\x1f\x5b\x87\x5a\x12\xc8\x91\x9c\x93\x88\x7a\x28\xf4\x3a\x77\x83\xe0\x6e\xf0\xe9\x6e\xf0\xf9\x6e\xbf\x15\x26\xfb\x08\x0f\x06\xbb\x6d\x8c\x9a\x2a\xad\x50\x62\xca\x1f\xca\x9a\x7a\x5c\x1e\x48\x19\x38\xde\xc8\x4f\x90\xdf\x04\xc8\x95\x8c\x2e\x27\x54\x18\x8f\x4e\xcc\x3d\x53\xf4\x94\x99\x28\x45\xf6\x2c\x28\x5b\xc0\xdf\xb6\xd7\x6c\xcb\x3c\xfb\x44\x04\xca\x0f\x9f\x3b\xc2\xb3\x38\x66\x16\x01\x77\xb6\x92\xba\xa7\xaa\x09\x2b\x1d\x2a\x91\x6e\xa9\xf7\xc6\x33\x84\x00\xdf\x6e\x3f\xaf\x23\xff\x69\x2d\x26\xfc\x7b\xc0\x95\x5b\x7f\x31\xf0\x1b\x19\xb3\x11\x8b\xc8\xbf\x99\xfd\x83\xe8\xbf\xc0\x4b\x8b\x8d\x7c\x7f\x29\x98\x41\x53\x3a\xd4\x32\xba\xa5\x46\x23\x02\xad\x07\x0a\x89\x40\xac\xa5\xc8\xa8\xd6\x24\xa1\x08\x6c\x8a\xe1\x06\x73\x3c\xb6\xf7\x3c\x9a\x32\x11\xcb\xe9\x27\xfc\x81\x0e\x6f\x1c\x23\xfe\x5c\xcf\x04\x02\xc4\xc6\xc3\x1f\x65\xa1\x40\x09\x39\x85\x7e\x8b\x62\x49\xa1\x8e\x24\xdc\x7a\x45\x9e\x4b\x65\xd0\x8a\x57\x07\xb8\x66\x45\xbd\x6f\x95\xca\xda\x0b\x0a\x72\x5b\xd0\xe9\x9a\xc7\xc3\x53\xdd\x09\xc3\x6f\xdf\x76\x17\x8b\x70\xaa\x97\x02\x2c\x69\x20\x45\xc4\x25\xc4\xa2\xbf\xca\xed\xcd\x8c\xae\xf4\x3b\x07\x6a\x5a\x26\x3f\x30\x18\xdc\xda\x44\x0d\xd6\x2e\x78\x58\x58\x4c\x0c\x81\xe3\x57\x37\x57\xbf\x07\x39\x51\x9a\xba\xf8\xd8\xdd\x9a\x55\xd6\x6b\xbb\x01\xd3\x67\x4a\x91\xb9\xe7\x0e\xeb\x32\x20\x10\x09\xb8\x86\xd8\xd3\x7d\xa4\x29\x34\x1e\xc8\xdb\x82\xea\x7a\xf0\x6c\xff\xf1\xec\xfd\x75\xd0\x45\x0c\xf5\x1c\x70\x75\x01\xc0\xc6\xde\xde\x96\x5a\xac\x12\xc6\x52\x7e\x62\x9f\x1f\x48\x9a\xc5\xf7\xaf\x4d\x78\xd6\xad\x61\xc3\xac\x45\xcd\x61\xf6\x46\xac\x0d\x24\x9c\x89\x5b\x08\x26\xef\x63\x6d\xe6\x9c\xea\x94\x42\x96\x20\xdb\xdf\xfb\x38\x35\x26\xb7\xe1\xcb\xc8\x2c\x8a\x45\x30\x94\xd2\x68\xa3\x48\x6e\x3f\xec\xf4\xb3\xda\x08\x8f\x82\xa3\xe0\x38\x8c\xb4\x5e\xef\xb9\xe9\x07\x76\x30\x62\xc2\xd0\x44\x31\x33\x07\x8c\x94\x1c\x9d\x3c\xf5\xdb\x5f\x4e\xb2\xb7\xaf\xae\xce\x6e\x66\x27\xe3\xf6\x59\xb1\x47\x9e\x7d\xb8\x78\x2f\xae\xd9\x21\xbf\xfd\x6d\x34\x9d\x5e\x9e\x91\x93\xf4\xe2\x22\x1e\xff\xc5\xf3\xd7\x34\x99\xa5\xe3\xf7\x6f\x2e\xdb\xa3\x64\xfc\xe1\xfa\x45\x76\xfb\x55\x3f\xc7\x28\x52\x52\x6b\xa9\x58\xc2\x44\x1f\x13\x21\xc5\x3c\x93\x85\xb6\x23\x9d\x33\xe3\x74\xc7\x5e\x43\xd6\x41\xe5\xc0\xd0\x41\x09\x84\xac\x8b\xc2\x27\xe8\xe5\xe5\xb1\xff\x7f\xf4\x24\x84\x33\x1f\x0a\xea\x96\x19\xbf\x4e\x03\xf7\x09\xa7\x5e\xbb\xe5\x68\x5f\xb8\x69\x0f\x9d\xa7\x4a\xc2\xf8\x84\x6e\xc8\x88\x28\x86\x8e\xf7\xd0\xff\xd0\x55\x4e\x15\x41\xed\x67\x7b\xa5\xa8\xb5\xb0\xa1\x9c\xf9\x60\x26\xd4\x5d\x07\x1d\xe4\x33\x74\x08\x7f\xc7\xd5\x5b\x25\x43\xe2\x1d\xec\xbb\x7f\xc1\xf3\x67\x55\x84\xfc\x4c\x7e\xfd\x09\xb6\x1f\xe7\xc8\x88\x02\x7f\x01\x94\x31\x32\xeb\x1c\x02\x53\x77\x07\x5a\x0c\xb8\xaa\x93\xc2\x95\xa3\x1a\x0e\x03\x9f\xd2\xff\xee\xb0\x83\x1f\x73\xd8\xc2\xa6\x60\x19\xa8\x5e\x58\x0d\xe1\x43\x19\xcf\xe1\xb5\x9e\x57\x60\x5c\x11\x86\x30\x41\x55\x35\x19\xdb\xa7\x7e\x0e\x2d\x0b\x23\x27\x06\x72\x95\xb2\x24\x35\x1d\xd4\x3e\x9e\xa4\x75\x72\xa8\xc6\x6c\x49\x6f\xd7\x3e\x13\x90\xf2\x14\x23\xe2\xba\x04\x0c\xf6\x45\x8e\x51\x46\x4d\x2a\xe3\x3e\xce\x6d\x7f\x41\x14\x3a\x88\x1b\xd0\xb3\x82\x1b\x06\xcd\xc2\x84\x8e\xd5\x56\x55\x4d\x76\x53\x19\x47\xe1\xc6\xe2\x06\x49\x49\xc7\x44\x5e\x18\xc4\x00\xc1\xad\x7c\x98\x1f\x4a\x04\x5b\xea\x78\x25\xc2\x7d\xd8\xca\xef\xe3\x22\xe7\x92\xc4\x4d\xb4\x10\xe0\x7e\x06\x1e\x28\x87\x05\xc4\x5c\x54\xa0\xba\x18\x66\xcc\xac\x60\x87\x46\x20\xf8\xf3\x63\x3a\x22\x60\x30\x3e\x7d\xe7\xb0\x7b\x61\xc9\xf4\x1d\x15\x7a\xce\x2f\xf5\xef\xe6\xb1\xd5\xcf\x1a\xed\x7e\xa2\xd4\xa3\xb6\x95\xa5\x5a\x02\x6e\x99\x09\x61\xf9\xab\x6d\xe7\x9f\x00\x00\x00\xff\xff\x6c\xc3\x89\x72\xc7\x0d\x00\x00")

func assetsStaticGallTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsStaticGallTmpl,
		"assets/static/gall.tmpl",
	)
}

func assetsStaticGallTmpl() (*asset, error) {
	bytes, err := assetsStaticGallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/static/gall.tmpl", size: 3527, mode: os.FileMode(420), modTime: time.Unix(1465166809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/static/gall.tmpl": assetsStaticGallTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"static": &bintree{nil, map[string]*bintree{
			"gall.tmpl": &bintree{assetsStaticGallTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

